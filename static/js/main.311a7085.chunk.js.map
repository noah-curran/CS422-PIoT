{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["DataCard","value","valueColor","description","className","style","fontSize","textAlign","color","undefined","fontWeight","marginBottom","addresses","Set","App","React","useState","url","setUrl","button","setButton","numberOfAcceptedLogins","setNumberOfAcceptedLogins","numberOfFailedLogins","setNumberOfFailedLogins","numberOfPasswordChangeAttempts","setNumberOfPasswordChangeAttempts","getLogs","fetch","method","mode","then","response","text","responseText","acceptedPasswordAttempts","split","filter","item","includes","length","failedPasswordAttempts","accessAttempts","lineInfo","attackerAddress","RegExp","exec","add","passwordChangeAttempts","useEffect","handle","setInterval","clearInterval","display","id","type","placeholder","onChange","event","target","onClick","e","clear","marginTop","size","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4OASA,SAASA,EAAT,GAA8D,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,YACrC,OACE,yBAAKC,UAAU,YACb,yBAAKC,MAAO,CAAEC,SAAU,MAAOC,UAAW,WACxC,wBAAIF,MAAO,CAAEG,WAAoBC,GAAbP,EAAyBA,EAAa,UAAWQ,WAAY,IAAKJ,SAAU,MAAOK,aAAc,IAAMV,GAC3H,4BAAKE,KAMb,IAAIS,EAAyB,IAAIC,IAiElBC,MA/Df,WAAgB,IAAD,EACSC,IAAMC,SAAS,IADxB,mBACNC,EADM,KACDC,EADC,OAEeH,IAAMC,UAAS,GAF9B,mBAENG,EAFM,KAEEC,EAFF,OAG+CL,IAAMC,SAAS,GAH9D,mBAGNK,EAHM,KAGkBC,EAHlB,OAI2CP,IAAMC,SAAS,GAJ1D,mBAINO,EAJM,KAIgBC,EAJhB,OAK+DT,IAAMC,SAAS,GAL9E,mBAKNS,EALM,KAK0BC,EAL1B,KAuBb,SAASC,IACPC,MAAMX,EAAK,CAAEY,OAAQ,MAAOC,KAAM,SAAUC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GACjF,IAAIC,EAA2BD,EAAaE,MAAM,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAAS,+BACrFjB,EAA0Ba,EAAyBK,QAEnD,IAAIC,EAAyBP,EAAaE,MAAM,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAAS,6BACnFf,EAAwBiB,EAAuBD,QAE/C,IAAIE,EAAiBR,EAAaE,MAAM,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAAS,sBAC3E,IAAK,IAAII,KAAYD,EAAgB,CACnC,IAAIE,EAAkB,IAAIC,OAAO,mDAAkEC,KAAKH,GACjF,MAAnBC,GACFhC,EAAUmC,IAAIH,EAAgB,IAIlC,IAAII,EAAyBd,EAAaE,MAAM,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAAS,8BACnFb,EAAkCsB,EAAuBR,WAI7D,OArCAS,qBAAU,WACR,IAAIC,EAASC,aAAY,WACvBxB,MACC,KAEH,OAAO,WACLyB,cAAcF,MAEf,CAAC/B,IA8BF,yBAAKf,UAAU,OACb,4BAAQA,UAAU,cAChB,4CAEF,6BAASC,MAAO,CAAEgD,QAAS,SACzB,2BAAOC,GAAG,YAAYlD,UAAU,YAAYmD,KAAK,OAAOC,YAAa,4BAA6BC,SAAU,SAACC,GAAD,OAAWxC,EAAOwC,EAAMC,OAAO1D,UAC3I,4BAAQG,UAAU,aAAawD,QAAS,SAAAC,GAAC,OAjC7CzC,GAAWD,GACXP,EAAUkD,aACVnC,MA+BI,mBAEF,6BAASvB,UAAU,WAAWC,MAAO,CAAE0D,UAAW,KAChD,kBAAC/D,EAAD,CAAUC,MAAOsB,EAAsBpB,YAAa,mDACpD,kBAACH,EAAD,CAAUC,MAAOoB,EAAwBlB,YAAa,+CACtD,kBAACH,EAAD,CAAUC,MAAOW,EAAUoD,KAAM7D,YAAa,0BAC9C,kBAACH,EAAD,CAAUC,MAAOwB,EAAgCtB,YAAa,oDCnElD8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.311a7085.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport './App.css';\r\n\r\ntype Props = {\r\n  value: number;\r\n  valueColor?: string;\r\n  description: string;\r\n}\r\n\r\nfunction DataCard({ value, valueColor, description }: Props) {\r\n  return (\r\n    <div className='App-card'>\r\n      <div style={{ fontSize: '2em', textAlign: 'center' }}>\r\n        <h1 style={{ color: valueColor!= undefined ? valueColor : '#FF2000', fontWeight: 800, fontSize: '3em', marginBottom: 0 }}>{value}</h1>\r\n        <h1>{description}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nlet addresses: Set<string> = new Set();\r\n\r\nfunction App() {\r\n  const [url, setUrl] = React.useState('');\r\n  const [button, setButton] = React.useState(false)\r\n  const [numberOfAcceptedLogins, setNumberOfAcceptedLogins] = React.useState(0);\r\n  const [numberOfFailedLogins, setNumberOfFailedLogins] = React.useState(0);\r\n  const [numberOfPasswordChangeAttempts, setNumberOfPasswordChangeAttempts] = React.useState(0);\r\n\r\n  useEffect(() => {\r\n    let handle = setInterval(() => {\r\n      getLogs()\r\n    }, 5000)\r\n\r\n    return function cleanup() {\r\n      clearInterval(handle)\r\n    }\r\n  }, [button])\r\n\r\n  function handleButton() {\r\n    setButton(!button);\r\n    addresses.clear()\r\n    getLogs()\r\n  }\r\n\r\n  function getLogs() {\r\n    fetch(url, { method: 'GET', mode: 'cors' }).then(response => response.text()).then(responseText => {\r\n      let acceptedPasswordAttempts = responseText.split('\\n').filter(item => item.includes('Accepted password for pi'))\r\n      setNumberOfAcceptedLogins(acceptedPasswordAttempts.length);\r\n\r\n      let failedPasswordAttempts = responseText.split('\\n').filter(item => item.includes('Failed password for pi'))\r\n      setNumberOfFailedLogins(failedPasswordAttempts.length);\r\n\r\n      let accessAttempts = responseText.split('\\n').filter(item => item.includes('password for pi'))\r\n      for (let lineInfo in accessAttempts) {\r\n        let attackerAddress = new RegExp('((::[\\d|\\w]+:[\\d|\\w]+:[\\d|\\w]+:[\\d|\\w]+)|(\\d+\\.\\d+\\.\\d+\\.\\d+))').exec(lineInfo)\r\n        if (attackerAddress != null) {\r\n          addresses.add(attackerAddress[0]);\r\n        }\r\n      }\r\n\r\n      let passwordChangeAttempts = responseText.split('\\n').filter(item => item.includes('password changed for pi'))\r\n      setNumberOfPasswordChangeAttempts(passwordChangeAttempts.length);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>CS 422 Piot</h1>\r\n      </header>\r\n      <section style={{ display: 'flex' }}>\r\n        <input id=\"url-input\" className='App-input' type='text' placeholder={'enter the url of honeypot'} onChange={(event) => setUrl(event.target.value)}></input>\r\n        <button className='App-button' onClick={e => handleButton()}>get statistics</button>\r\n      </section>\r\n      <section className='App-grid' style={{ marginTop: 64 }}>\r\n        <DataCard value={numberOfFailedLogins} description={'successful access attempts from external users'} />\r\n        <DataCard value={numberOfAcceptedLogins} description={'failed access attempts from external users'} />\r\n        <DataCard value={addresses.size} description={'unique external users'} />\r\n        <DataCard value={numberOfPasswordChangeAttempts} description={'password change attempts from external users'} />\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}