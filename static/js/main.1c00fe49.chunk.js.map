{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["DataCard","value","valueColor","description","className","style","fontSize","textAlign","color","undefined","fontWeight","marginBottom","addresses","Set","App","React","useState","url","setUrl","button","setButton","numberOfAcceptedLogins","setNumberOfAcceptedLogins","numberOfFailedLogins","setNumberOfFailedLogins","numberOfPasswordChangeAttempts","setNumberOfPasswordChangeAttempts","getLogs","fetch","method","mode","then","response","text","responseText","acceptedPasswordAttempts","split","filter","item","includes","length","failedPasswordAttempts","accessAttempts","lineInfo","attackerAddress","RegExp","exec","add","passwordChangeAttempts","useEffect","handle","setInterval","clearInterval","display","id","type","placeholder","onChange","event","target","onClick","e","clear","marginTop","size","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4OASA,SAASA,EAAT,GAA8D,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,YACrC,OACE,yBAAKC,UAAU,YACb,yBAAKC,MAAO,CAAEC,SAAU,MAAOC,UAAW,WACxC,wBAAIF,MAAO,CAAEG,WAAoBC,GAAbP,EAAyBA,EAAa,UAAWQ,WAAY,IAAKJ,SAAU,MAAOK,aAAc,IAAMV,GAC3H,4BAAKE,KAMb,IAAIS,EAAyB,IAAIC,IAiElBC,MA/Df,WAAgB,IAAD,EACSC,IAAMC,SAAS,IADxB,mBACNC,EADM,KACDC,EADC,OAEeH,IAAMC,UAAS,GAF9B,mBAENG,EAFM,KAEEC,EAFF,OAG+CL,IAAMC,SAAS,GAH9D,mBAGNK,EAHM,KAGkBC,EAHlB,OAI2CP,IAAMC,SAAS,GAJ1D,mBAINO,EAJM,KAIgBC,EAJhB,OAK+DT,IAAMC,SAAS,GAL9E,mBAKNS,EALM,KAK0BC,EAL1B,KAuBb,SAASC,IACPC,MAAMX,EAAK,CAAEY,OAAQ,MAAOC,KAAM,SAAUC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GACjF,IAAIC,EAA2BD,EAAaE,MAAM,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAAS,+BACrFjB,EAA0Ba,EAAyBK,QAEnD,IAAIC,EAAyBP,EAAaE,MAAM,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAAS,6BACnFf,EAAwBiB,EAAuBD,QAE/C,IAAIE,EAAiBR,EAAaE,MAAM,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAAS,sBAC3E,IAAK,IAAII,KAAYD,EAAgB,CACnC,IAAIE,EAAkB,IAAIC,OAAO,mDAAkEC,KAAKH,GACjF,MAAnBC,GACFhC,EAAUmC,IAAIH,EAAgB,IAIlC,IAAII,EAAyBd,EAAaE,MAAM,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAAS,8BACnFb,EAAkCsB,EAAuBR,WAI7D,OArCAS,qBAAU,WACR,IAAIC,EAASC,aAAY,WACvBxB,MACC,KAEH,OAAO,WACLyB,cAAcF,MAEf,CAAC/B,IA8BF,yBAAKf,UAAU,OACb,4BAAQA,UAAU,cAChB,4CAEF,6BAASC,MAAO,CAAEgD,QAAS,SACzB,2BAAOC,GAAG,YAAYlD,UAAU,YAAYmD,KAAK,OAAOC,YAAa,4BAA6BC,SAAU,SAACC,GAAD,OAAWxC,EAAOwC,EAAMC,OAAO1D,UAC3I,4BAAQG,UAAU,aAAawD,QAAS,SAAAC,GAAC,OAjC7CzC,GAAWD,GACXP,EAAUkD,aACVnC,MA+BI,mBAEF,6BAASvB,UAAU,WAAWC,MAAO,CAAE0D,UAAW,KAChD,kBAAC/D,EAAD,CAAUC,MAAOsB,EAAsBpB,YAAa,mDACpD,kBAACH,EAAD,CAAUC,MAAOoB,EAAwBlB,YAAa,+CACtD,kBAACH,EAAD,CAAUC,MAAOW,EAAUoD,KAAM7D,YAAa,0BAC9C,kBAACH,EAAD,CAAUC,MAAOwB,EAAgCtB,YAAa,oDCnElD8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1c00fe49.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\n\ntype Props = {\n  value: number;\n  valueColor?: string;\n  description: string;\n}\n\nfunction DataCard({ value, valueColor, description }: Props) {\n  return (\n    <div className='App-card'>\n      <div style={{ fontSize: '2em', textAlign: 'center' }}>\n        <h1 style={{ color: valueColor!= undefined ? valueColor : '#FF2000', fontWeight: 800, fontSize: '3em', marginBottom: 0 }}>{value}</h1>\n        <h1>{description}</h1>\n      </div>\n    </div>\n  );\n}\n\nlet addresses: Set<string> = new Set();\n\nfunction App() {\n  const [url, setUrl] = React.useState('');\n  const [button, setButton] = React.useState(false)\n  const [numberOfAcceptedLogins, setNumberOfAcceptedLogins] = React.useState(0);\n  const [numberOfFailedLogins, setNumberOfFailedLogins] = React.useState(0);\n  const [numberOfPasswordChangeAttempts, setNumberOfPasswordChangeAttempts] = React.useState(0);\n\n  useEffect(() => {\n    let handle = setInterval(() => {\n      getLogs()\n    }, 5000)\n\n    return function cleanup() {\n      clearInterval(handle)\n    }\n  }, [button])\n\n  function handleButton() {\n    setButton(!button);\n    addresses.clear()\n    getLogs()\n  }\n\n  function getLogs() {\n    fetch(url, { method: 'GET', mode: 'cors' }).then(response => response.text()).then(responseText => {\n      let acceptedPasswordAttempts = responseText.split('\\n').filter(item => item.includes('Accepted password for pi'))\n      setNumberOfAcceptedLogins(acceptedPasswordAttempts.length);\n\n      let failedPasswordAttempts = responseText.split('\\n').filter(item => item.includes('Failed password for pi'))\n      setNumberOfFailedLogins(failedPasswordAttempts.length);\n\n      let accessAttempts = responseText.split('\\n').filter(item => item.includes('password for pi'))\n      for (let lineInfo in accessAttempts) {\n        let attackerAddress = new RegExp('((::[\\d|\\w]+:[\\d|\\w]+:[\\d|\\w]+:[\\d|\\w]+)|(\\d+\\.\\d+\\.\\d+\\.\\d+))').exec(lineInfo)\n        if (attackerAddress != null) {\n          addresses.add(attackerAddress[0]);\n        }\n      }\n\n      let passwordChangeAttempts = responseText.split('\\n').filter(item => item.includes('password changed for pi'))\n      setNumberOfPasswordChangeAttempts(passwordChangeAttempts.length);\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>CS 422 Piot</h1>\n      </header>\n      <section style={{ display: 'flex' }}>\n        <input id=\"url-input\" className='App-input' type='text' placeholder={'enter the url of honeypot'} onChange={(event) => setUrl(event.target.value)}></input>\n        <button className='App-button' onClick={e => handleButton()}>get statistics</button>\n      </section>\n      <section className='App-grid' style={{ marginTop: 64 }}>\n        <DataCard value={numberOfFailedLogins} description={'successful access attempts from external users'} />\n        <DataCard value={numberOfAcceptedLogins} description={'failed access attempts from external users'} />\n        <DataCard value={addresses.size} description={'unique external users'} />\n        <DataCard value={numberOfPasswordChangeAttempts} description={'password change attempts from external users'} />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}